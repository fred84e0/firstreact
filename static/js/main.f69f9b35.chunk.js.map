{"version":3,"sources":["logo.svg","Profile.js","Header.js","AddPostForm.js","Button.js","AddCommentForm.js","Comment.js","Post.js","Feed.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Profile","probs","name","Header","AddPostForm","console","log","posts","className","Button","useState","count","setCount","onClick","AddCommentForm","type","Comment","author","comment","Post","message","comments","map","key","_id","Feed","item","likes","Footer","App","setPosts","useEffect","fetch","baseURL","method","headers","then","e","json","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6JAAAA,EAAOC,QAAU,IAA0B,kC,+HCE5B,SAASC,EAAQC,GAC9B,OACE,6BACE,+CAAqBA,EAAMC,KAA3B,MCFS,SAASC,EAAOF,GAC7B,OACE,gCACE,6CACA,kBAACD,EAAD,CAASE,KAAMD,EAAMC,QCLZ,SAASE,EAAYH,GAElC,OADAI,QAAQC,IAAIL,EAAMM,OAEhB,yBAAKC,UAAU,YACb,kDACA,wCCLS,SAASC,IAAU,IAAD,EACLC,mBAAS,GADJ,mBACxBC,EADwB,KACjBC,EADiB,KAK/B,OACE,6BACE,4BAAQC,QALQ,WAClBD,EAASD,EAAQ,KAIf,QAAoCA,ICP3B,SAASG,IACtB,OACE,yBAAKN,UAAU,eACb,qDACA,8BACE,mCACA,4BAAQO,KAAK,UAAb,aCLO,SAASC,EAAQf,GAC9B,OACE,yBAAKO,UAAU,WACb,qCAAWP,EAAMgB,OAAjB,KACA,uCAAahB,EAAMiB,UCDV,SAASC,EAAKlB,GAE3B,OADAI,QAAQC,IAAIL,GAEV,yBAAKO,UAAU,QACb,4BAAKP,EAAMgB,QACX,oDACA,2BAAIhB,EAAMmB,SAEV,kBAACX,EAAD,MAEA,kBAACK,EAAD,MACCb,EAAMoB,SAASC,KAAI,SAAAJ,GAClB,OAAO,kBAACF,EAAD,CAASO,IAAKL,EAAQM,IAAKP,OAAQC,EAAQD,OAAQC,QAASA,EAAQA,cCdpE,SAASO,EAAKxB,GAC3B,OACE,yBAAKO,UAAU,QACb,+CACA,kBAACJ,EAAD,MAECH,EAAMM,MAAMe,KAAI,SAAAI,GACf,OAAO,kBAACP,EAAD,CAAMI,IAAKG,EAAKF,IAAKJ,QAASM,EAAKN,QAASH,OAAQS,EAAKT,OAAQU,MAAOD,EAAKC,MAAON,SAAUK,EAAKL,eCTnG,SAASO,EAAO3B,GAC7B,OACE,yBAAKO,UAAU,UACb,oDACA,+CAAqBP,EAAMC,O,MC2ClB2B,MAxCf,WACE,IADa,EAGanB,mBAAS,IAHtB,mBAGNH,EAHM,KAGCuB,EAHD,KA2Bb,OAvBAC,qBAAU,WAORC,MAAMC,4EAA2C,CAC/CC,OAAQ,MACRC,QAPc,CACd,eAAgB,kCAChB,WAAY,2BACZ,gBAAiB,cAMhBC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAAAC,GAAC,OAAIP,EAASO,QACrB,IAWD,yBAAK7B,UAAU,OACb,4BAAQK,QAASkB,aAAjB,YAEA,kBAAC5B,EAAD,CAAQD,KA9BC,aA+BT,kBAACuB,EAAD,CAAMlB,MAAOA,IACb,kBAACqB,EAAD,CAAQ1B,KAhCC,aAkCT,kBAAC,IAAD,CAAUS,MAAO,MChCH4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMd,MAAK,SAAAe,GACjCA,EAAaC,kB","file":"static/js/main.f69f9b35.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from \"react\";\n\nexport default function Profile(probs) {\n  return (\n    <div>\n      <h2>Navn i Profile: {probs.name} </h2>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Profile from \"./Profile.js\";\n\nexport default function Header(probs) {\n  return (\n    <header>\n      <h1>Im the header</h1>\n      <Profile name={probs.name} />\n    </header>\n  );\n}\n","import React from \"react\";\n\nexport default function AddPostForm(probs) {\n  console.log(probs.posts);\n  return (\n    <div className=\"add_post\">\n      <p>Det her er PostForm</p>\n      <textarea> </textarea>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\n\nexport default function Button() {\n  const [count, setCount] = useState(0);\n  const updateCount = () => {\n    setCount(count + 1);\n  };\n  return (\n    <div>\n      <button onClick={updateCount}>Like {count}</button>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\n\nexport default function AddCommentForm() {\n  return (\n    <div className=\"add_comment\">\n      <p>Det her er CommentForm</p>\n      <form>\n        <textarea></textarea>\n        <button type=\"submit\">Comment</button>\n      </form>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport App from \"./App.js\";\n\nexport default function Comment(probs) {\n  return (\n    <div className=\"comment\">\n      <h4>User: {probs.author} </h4>\n      <p>Comment: {probs.comment}</p>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport Button from \"./Button.js\";\nimport AddCommentForm from \"./AddCommentForm.js\";\nimport Comment from \"./Comment.js\";\n\nexport default function Post(probs) {\n  console.log(probs);\n  return (\n    <div className=\"post\">\n      <h2>{probs.author}</h2>\n      <h3>Det her er en \"POST\"</h3>\n      <p>{probs.message}</p>\n\n      <Button />\n\n      <AddCommentForm />\n      {probs.comments.map(comment => {\n        return <Comment key={comment._id} author={comment.author} comment={comment.comment} />;\n      })}\n    </div>\n  );\n}\n","import React from \"react\";\nimport AddPostForm from \"./AddPostForm.js\";\nimport Post from \"./Post.js\";\n\nexport default function Feed(probs) {\n  return (\n    <div className=\"feed\">\n      <h3>Det her er Feed</h3>\n      <AddPostForm />\n\n      {probs.posts.map(item => {\n        return <Post key={item._id} message={item.message} author={item.author} likes={item.likes} comments={item.comments} />;\n      })}\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function Footer(probs) {\n  return (\n    <div className=\"footer\">\n      <h3>Det her er foooteren</h3>\n      <h3> Navn i footer: {probs.name}</h3>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport Skeleton from \"react-loading-skeleton\";\n\nimport logo from \"./logo.svg\";\nimport Header from \"./Header.js\";\nimport Feed from \"./Feed.js\";\nimport Footer from \"./Footer.js\";\nimport \"./App.css\";\n\nfunction App() {\n  const name = \"Frederik\"; //pass this to Profile and Footer\n\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    const baseURL = \"https://frontend2019ffj-f6ca.restdb.io/rest/\";\n    const headers = {\n      \"Content-Type\": \"application/json; charset=utf-8\",\n      \"x-apikey\": \"5d90ee5f1ce70f6379855145\",\n      \"cache-control\": \"no-cache\"\n    };\n    fetch(baseURL + \"postsreact?fetchchildren=true\", {\n      method: \"get\",\n      headers: headers\n    })\n      .then(e => e.json())\n      .then(e => setPosts(e));\n  }, []);\n\n  // function addPost() {\n  //   const copy = posts.concat({\n  //     message: \"yo\",\n  //     author: \"Freddy\"\n  //   });\n\n  //   setPosts(copy);\n  // }\n  return (\n    <div className=\"App\">\n      <button onClick={useEffect}>Add post</button>\n\n      <Header name={name} />\n      <Feed posts={posts} />\n      <Footer name={name} />\n\n      <Skeleton count={1} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}